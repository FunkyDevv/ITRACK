import * as React from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import {
  Settings as SettingsIcon,
  User,
  Bell,
  Shield,
  Clock,
  Save,
  Database,
  Users,
  RefreshCw,
  Download,
  Key,
  Target
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

export default function SettingsPage() {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  
  const [firstName, setFirstName] = React.useState(userProfile?.firstName || "");
  const [lastName, setLastName] = React.useState(userProfile?.lastName || "");
  const [email, setEmail] = React.useState(userProfile?.email || "");
  const [company, setCompany] = React.useState(userProfile?.company || "");
  const [scheduledTimeIn, setScheduledTimeIn] = React.useState(userProfile?.scheduledTimeIn || "09:00");
  const [scheduledTimeOut, setScheduledTimeOut] = React.useState(userProfile?.scheduledTimeOut || "17:00");
  const [notifications, setNotifications] = React.useState(true);
  const [emailAlerts, setEmailAlerts] = React.useState(true);
  const [locationTracking, setLocationTracking] = React.useState(true);
  const [saving, setSaving] = React.useState(false);

  if (!userProfile) {
    return null;
  }

  const isSupervisor = userProfile.role === "supervisor";
  const isTeacher = userProfile.role === "teacher";
  const isIntern = userProfile.role === "intern";

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast({
        title: "Profile Updated",
        description: "Your profile has been successfully updated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import {
  Settings as SettingsIcon,
  User,
  Bell,
  Shield,
  Clock,
  Save,
  Calendar
} from "lucide-react";

export default function SettingsPage() {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  
  // State for profile editing
  const [firstName, setFirstName] = React.useState(userProfile?.firstName || "");
  const [lastName, setLastName] = React.useState(userProfile?.lastName || "");
  const [email, setEmail] = React.useState(userProfile?.email || "");
  const [company, setCompany] = React.useState(userProfile?.company || "");
  const [scheduledTimeIn, setScheduledTimeIn] = React.useState(userProfile?.scheduledTimeIn || "09:00");
  const [scheduledTimeOut, setScheduledTimeOut] = React.useState(userProfile?.scheduledTimeOut || "17:00");
  
  // Settings state
  const [notifications, setNotifications] = React.useState(true);
  const [emailAlerts, setEmailAlerts] = React.useState(true);
  const [locationTracking, setLocationTracking] = React.useState(true);
  const [saving, setSaving] = React.useState(false);

  if (!userProfile) {
    return null;
  }

  const isSupervisor = userProfile.role === "supervisor";
  const isTeacher = userProfile.role === "teacher";
  const isIntern = userProfile.role === "intern";

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast({
        title: "Profile Updated",
        description: "Your profile has been successfully updated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="flex-1">
      <div className="container mx-auto max-w-5xl p-8">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold tracking-tight text-foreground">Settings</h1>
            <p className="text-muted-foreground mt-2">Manage your account settings and preferences</p>
          </div>
        </div>

        <div className="space-y-6 pb-8">
        {/* Profile Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Profile Settings
            </CardTitle>
            <CardDescription>
              Manage your personal information and preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="lastName">Last Name</Label>
                <Input
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="company">Company/School</Label>
                <Input
                  id="company"
                  value={company}
                  onChange={(e) => setCompany(e.target.value)}
                />
              </div>
            </div>
            {isIntern && (
              <div>
                <h4 className="text-sm font-medium mb-3 flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  Work Schedule
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="timeIn">Scheduled Time In</Label>
                    <Input
                      id="timeIn"
                      type="time"
                      value={scheduledTimeIn}
                      onChange={(e) => setScheduledTimeIn(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="timeOut">Scheduled Time Out</Label>
                    <Input
                      id="timeOut"
                      type="time"
                      value={scheduledTimeOut}
                      onChange={(e) => setScheduledTimeOut(e.target.value)}
                    />
                  </div>
                </div>
              </div>
            )}
            <Button
              onClick={handleSaveProfile}
              disabled={saving}
              className="w-full md:w-auto"
            >
              {saving ? (
                <>Saving...</>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Notifications Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notifications
            </CardTitle>
            <CardDescription>
              Configure your notification preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="notifications">Push Notifications</Label>
                <p className="text-sm text-muted-foreground">
                  Receive notifications about important updates
                </p>
              </div>
              <Switch
                id="notifications"
                checked={notifications}
                onCheckedChange={setNotifications}
              />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="emailAlerts">Email Alerts</Label>
                <p className="text-sm text-muted-foreground">
                  Receive important updates via email
                </p>
              </div>
              <Switch
                id="emailAlerts"
                checked={emailAlerts}
                onCheckedChange={setEmailAlerts}
              />
            </div>
            {isIntern && (
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="locationTracking">Location Tracking</Label>
                  <p className="text-sm text-muted-foreground">
                    Allow location tracking for attendance
                  </p>
                </div>
                <Switch
                  id="locationTracking"
                  checked={locationTracking}
                  onCheckedChange={setLocationTracking}
                />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Role-Specific Settings */}
        {isSupervisor && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Supervisor Settings
              </CardTitle>
              <CardDescription>
                System administration and oversight controls
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h4 className="text-sm font-medium">System Monitoring</h4>
                <div className="grid sm:grid-cols-2 gap-4 text-sm">
                  <div className="flex justify-between">
                    <span>Active Users:</span>
                    <span className="font-medium">24</span>
                  </div>
                  <div className="flex justify-between">
                    <span>System Uptime:</span>
                    <span className="font-medium">99.9%</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Last Backup:</span>
                    <span className="font-medium">2 hours ago</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

      </div>
    </div>
  );
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import {
  Settings as SettingsIcon,
  User,
  Bell,
  Shield,
  Save,
} from "lucide-react";

export default function SettingsPage() {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  
  // State for profile editing
  const [firstName, setFirstName] = React.useState(userProfile?.firstName || "");
  const [lastName, setLastName] = React.useState(userProfile?.lastName || "");
  const [email, setEmail] = React.useState(userProfile?.email || "");
  const [company, setCompany] = React.useState(userProfile?.company || "");
  const [scheduledTimeIn, setScheduledTimeIn] = React.useState(userProfile?.scheduledTimeIn || "09:00");
  const [scheduledTimeOut, setScheduledTimeOut] = React.useState(userProfile?.scheduledTimeOut || "17:00");
  
  // Settings state
  const [notifications, setNotifications] = React.useState(true);
  const [emailAlerts, setEmailAlerts] = React.useState(true);
  const [locationTracking, setLocationTracking] = React.useState(true);
  const [saving, setSaving] = React.useState(false);

  if (!userProfile) {
    return null;
  }

  const isSupervisor = userProfile.role === "supervisor";
  const isTeacher = userProfile.role === "teacher";
  const isIntern = userProfile.role === "intern";

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast({
        title: "Profile Updated",
        description: "Your profile has been successfully updated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="flex-1 space-y-4 p-8 pt-6 bg-background min-h-screen">
      <div className="flex items-center justify-between space-y-2">
        <h2 className="text-3xl font-bold tracking-tight">Settings</h2>
      </div>
      <div className="grid gap-4">
        {/* Profile Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Profile Settings
            </CardTitle>
            <CardDescription>
              Manage your personal information and preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="lastName">Last Name</Label>
                <Input
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="company">Company/School</Label>
                <Input
                  id="company"
                  value={company}
                  onChange={(e) => setCompany(e.target.value)}
                />
              </div>
            </div>

            <Button
              onClick={handleSaveProfile}
              disabled={saving}
              className="w-full md:w-auto"
            >
              {saving ? (
                <>Saving...</>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Notifications Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notifications
            </CardTitle>
            <CardDescription>
              Configure your notification preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="notifications">Push Notifications</Label>
                <p className="text-sm text-muted-foreground">
                  Receive notifications about important updates
                </p>
              </div>
              <Switch
                id="notifications"
                checked={notifications}
                onCheckedChange={setNotifications}
              />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="emailAlerts">Email Alerts</Label>
                <p className="text-sm text-muted-foreground">
                  Receive important updates via email
                </p>
              </div>
              <Switch
                id="emailAlerts"
                checked={emailAlerts}
                onCheckedChange={setEmailAlerts}
              />
            </div>
            {isIntern && (
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="locationTracking">Location Tracking</Label>
                  <p className="text-sm text-muted-foreground">
                    Allow location tracking for attendance
                  </p>
                </div>
                <Switch
                  id="locationTracking"
                  checked={locationTracking}
                  onCheckedChange={setLocationTracking}
                />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Supervisor-specific settings */}
        {isSupervisor && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Supervisor Settings
              </CardTitle>
              <CardDescription>
                System administration and oversight controls
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Add supervisor-specific settings here */}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import {
  Settings,
  User,
  Bell,
  Shield,
  Clock,
  Database,
  Users,
  Save,
  RefreshCw,
  Download,
  Key,
  Target
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

export default function SettingsPage() {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  
  // State for profile editing
  const [firstName, setFirstName] = React.useState(userProfile?.firstName || "");
  const [lastName, setLastName] = React.useState(userProfile?.lastName || "");
  const [email, setEmail] = React.useState(userProfile?.email || "");
  const [company, setCompany] = React.useState(userProfile?.company || "");
  const [scheduledTimeIn, setScheduledTimeIn] = React.useState(userProfile?.scheduledTimeIn || "09:00");
  const [scheduledTimeOut, setScheduledTimeOut] = React.useState(userProfile?.scheduledTimeOut || "17:00");
  
  // Settings state
  const [notifications, setNotifications] = React.useState(true);
  const [emailAlerts, setEmailAlerts] = React.useState(true);
  const [locationTracking, setLocationTracking] = React.useState(true);
  const [showPassword, setShowPassword] = React.useState(false);
  const [saving, setSaving] = React.useState(false);

  if (!userProfile) {
    return null;
  }

  const isSupervisor = userProfile.role === "supervisor";
  const isTeacher = userProfile.role === "teacher";
  const isIntern = userProfile.role === "intern";

  if (!userProfile) {
    return null;
  }

  const isSupervisor = userProfile.role === "supervisor";
  const isTeacher = userProfile.role === "teacher";
  const isIntern = userProfile.role === "intern";
  
  // Settings state
  const [notifications, setNotifications] = React.useState(true);
  const [emailAlerts, setEmailAlerts] = React.useState(true);
  const [locationTracking, setLocationTracking] = React.useState(true);
  const [showPassword, setShowPassword] = React.useState(false);
  
  // Loading states
  const [saving, setSaving] = React.useState(false);
  const [showPasswordDialog, setShowPasswordDialog] = React.useState(false);
  
  React.useEffect(() => {
    if (userProfile) {
      setFirstName(userProfile.firstName || "");
      setLastName(userProfile.lastName || "");
      setEmail(userProfile.email || "");
      setCompany(userProfile.company || "");
      setScheduledTimeIn(userProfile.scheduledTimeIn || "09:00");
      setScheduledTimeOut(userProfile.scheduledTimeOut || "17:00");
    }
  }, [userProfile]);

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Profile Updated",
        description: "Your profile has been successfully updated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="flex-1 space-y-4 p-8 pt-6 bg-background">
      <div className="flex items-center justify-between space-y-2">
        <h2 className="text-3xl font-bold tracking-tight">Settings</h2>
      </div>
      <div className="grid gap-4">
        {/* Profile Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Profile Settings
            </CardTitle>
            <CardDescription>
              Manage your personal information and preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="lastName">Last Name</Label>
                <Input
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="company">Company/School</Label>
                <Input
                  id="company"
                  value={company}
                  onChange={(e) => setCompany(e.target.value)}
                />
              </div>
            </div>
          </CardContent>
        </Card>

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Profile Updated",
        description: "Your profile has been successfully updated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  const handleExportData = () => {
    toast({
      title: "Data Export",
      description: "Your data export will be ready shortly",
    });
  };

  const isSupervisor = userProfile?.role === "supervisor";
  const isTeacher = userProfile?.role === "teacher";
  const isIntern = userProfile?.role === "intern";

  return (
    <div className="flex-1 p-8">
      <div className="container max-w-5xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold tracking-tight text-foreground">Settings</h1>
            <p className="text-muted-foreground mt-2">Manage your account settings and preferences</p>
          </div>
        </div>

        <div className="space-y-6 pb-8">
          <User className="h-4 w-4" />
          <span className="text-sm font-medium">
            {userProfile?.firstName} {userProfile?.lastName}
          </span>
          <Badge variant="outline" className="text-xs">
            {userProfile?.role}
          </Badge>
        </div>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* Profile Settings */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Profile Information
            </CardTitle>
            <CardDescription>
              Update your personal information and contact details
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="firstName">First Name</Label>
                <Input
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="Enter your first name"
                />
              </div>
              <div>
                <Label htmlFor="lastName">Last Name</Label>
                <Input
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="Enter your last name"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="email">Email Address</Label>
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <Label htmlFor="company">Company/Organization</Label>
              <Input
                id="company"
                value={company}
                onChange={(e) => setCompany(e.target.value)}
                placeholder="Enter your company name"
              />
            </div>

            {/* Schedule Settings for Interns */}
            {isIntern && (
              <>
                <Separator />
                <div>
                  <h4 className="text-sm font-medium mb-3 flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    Work Schedule
                  </h4>
                  <div className="grid sm:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="timeIn">Scheduled Time In</Label>
                      <Input
                        id="timeIn"
                        type="time"
                        value={scheduledTimeIn}
                        onChange={(e) => setScheduledTimeIn(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="timeOut">Scheduled Time Out</Label>
                      <Input
                        id="timeOut"
                        type="time"
                        value={scheduledTimeOut}
                        onChange={(e) => setScheduledTimeOut(e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </>
            )}

            <div className="flex gap-3 pt-4">
              <Button onClick={handleSaveProfile} disabled={saving}>
                {saving ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    Save Changes
                  </>
                )}
              </Button>
              <Button variant="outline">
                <RefreshCw className="h-4 w-4 mr-2" />
                Reset
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Quick Actions
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <Dialog open={showPasswordDialog} onOpenChange={setShowPasswordDialog}>
              <DialogTrigger asChild>
                <Button variant="outline" className="w-full justify-start">
                  <Key className="h-4 w-4 mr-2" />
                  Change Password
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Change Password</DialogTitle>
                  <DialogDescription>
                    Enter your current password and a new password
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="currentPassword">Current Password</Label>
                    <Input id="currentPassword" type="password" />
                  </div>
                  <div>
                    <Label htmlFor="newPassword">New Password</Label>
                    <Input id="newPassword" type="password" />
                  </div>
                  <div>
                    <Label htmlFor="confirmPassword">Confirm New Password</Label>
                    <Input id="confirmPassword" type="password" />
                  </div>
                  <div className="flex gap-3">
                    <Button className="flex-1">Update Password</Button>
                    <Button variant="outline" onClick={() => setShowPasswordDialog(false)}>
                      Cancel
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
            
            <Button variant="outline" className="w-full justify-start" onClick={handleExportData}>
              <Download className="h-4 w-4 mr-2" />
              Export Data
            </Button>
            
            {isSupervisor && (
              <Button variant="outline" className="w-full justify-start">
                <Database className="h-4 w-4 mr-2" />
                Backup System
              </Button>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Notification & App Settings */}
      <div className="grid lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notification Settings
            </CardTitle>
            <CardDescription>
              Configure how you receive notifications
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="notifications">Push Notifications</Label>
                <p className="text-sm text-muted-foreground">
                  Receive notifications for important updates
                </p>
              </div>
              <Switch
                id="notifications"
                checked={notifications}
                onCheckedChange={setNotifications}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="emailAlerts">Email Alerts</Label>
                <p className="text-sm text-muted-foreground">
                  Get email notifications for deadlines and updates
                </p>
              </div>
              <Switch
                id="emailAlerts"
                checked={emailAlerts}
                onCheckedChange={setEmailAlerts}
              />
            </div>
            
            {isIntern && (
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="locationTracking">Location Tracking</Label>
                  <p className="text-sm text-muted-foreground">
                    Allow location tracking for attendance
                  </p>
                </div>
                <Switch
                  id="locationTracking"
                  checked={locationTracking}
                  onCheckedChange={setLocationTracking}
                />
              </div>
            )}
          </CardContent>
        </Card>


      </div>

      {/* Role-Specific Settings */}
      {isSupervisor && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Supervisor Settings
            </CardTitle>
            <CardDescription>
              System administration and oversight controls
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
              <Button variant="outline" className="justify-start">
                <Users className="h-4 w-4 mr-2" />
                User Management
              </Button>
              <Button variant="outline" className="justify-start">
                <Database className="h-4 w-4 mr-2" />
                System Backup
              </Button>
              <Button variant="outline" className="justify-start">
                <Shield className="h-4 w-4 mr-2" />
                Security Settings
              </Button>
            </div>
            
            <Separator />
            
            <div className="space-y-4">
              <h4 className="text-sm font-medium">System Monitoring</h4>
              <div className="grid sm:grid-cols-2 gap-4 text-sm">
                <div className="flex justify-between">
                  <span>Active Users:</span>
                  <span className="font-medium">24</span>
                </div>
                <div className="flex justify-between">
                  <span>System Uptime:</span>
                  <span className="font-medium">99.9%</span>
                </div>
                <div className="flex justify-between">
                  <span>Last Backup:</span>
                  <span className="font-medium">2 hours ago</span>
                </div>
                <div className="flex justify-between">
                  <span>Storage Used:</span>
                  <span className="font-medium">2.4 GB</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {isTeacher && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5" />
              Teacher Settings
            </CardTitle>
            <CardDescription>
              Manage your teaching preferences and intern oversight
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="defaultTaskPriority">Default Task Priority</Label>
                <Select defaultValue="medium">
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="gradeNotifications">Grade Notifications</Label>
                <Select defaultValue="immediate">
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="immediate">Immediate</SelectItem>
                    <SelectItem value="daily">Daily Summary</SelectItem>
                    <SelectItem value="weekly">Weekly Summary</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Auto-assign Tasks</Label>
                <p className="text-sm text-muted-foreground">
                  Automatically assign new tasks to all interns
                </p>
              </div>
              <Switch defaultChecked />
            </div>
          </CardContent>
        </Card>
      )}

      {isIntern && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              Intern Settings
            </CardTitle>
            <CardDescription>
              Manage your internship preferences and goals
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <Label htmlFor="goals">Personal Goals</Label>
              <Textarea
                id="goals"
                placeholder="Describe your internship goals and objectives..."
                className="mt-1"
                rows={3}
              />
            </div>
            
            <div className="grid sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="preferredTasks">Preferred Task Types</Label>
                <Select defaultValue="all">
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Types</SelectItem>
                    <SelectItem value="research">Research</SelectItem>
                    <SelectItem value="development">Development</SelectItem>
                    <SelectItem value="documentation">Documentation</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="workStyle">Work Style</Label>
                <Select defaultValue="balanced">
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="morning">Morning Person</SelectItem>
                    <SelectItem value="evening">Evening Person</SelectItem>
                    <SelectItem value="balanced">Balanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

    </div>
  );
}