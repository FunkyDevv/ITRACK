import * as React from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { 
  subscribeToPendingAttendance,
  updateAttendanceStatus,
  getUserData,
  AttendanceRecord
} from "@/lib/firebase";
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Clock,
  CheckCircle,
  XCircle,
  Calendar,
  MapPin,
  User,
  LogIn,
  LogOut,
  Search,
  Camera,
  AlertTriangle,
  Activity
} from "lucide-react";

interface PendingAttendanceWithIntern extends AttendanceRecord {
  internName: string;
  internEmail: string;
}

export default function AttendanceApprovalsPage() {
  const { userProfile } = useAuth();
  const { toast } = useToast();
  const [pendingRecords, setPendingRecords] = React.useState<PendingAttendanceWithIntern[]>([]);
  const [filteredRecords, setFilteredRecords] = React.useState<PendingAttendanceWithIntern[]>([]);
  const [isLoading, setIsLoading] = React.useState(true);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [isProcessing, setIsProcessing] = React.useState<string | null>(null);
  const [approvedRecords, setApprovedRecords] = React.useState<Set<string>>(new Set());
  const [rejectedRecords, setRejectedRecords] = React.useState<Set<string>>(new Set());

  // Set up real-time subscription for pending attendance
  React.useEffect(() => {
    if (!userProfile?.uid) return;

    console.log("🔔 Setting up pending attendance subscription for supervisor:", userProfile.uid);

    const unsubscribe = subscribeToPendingAttendance(
      userProfile.uid,
      async (records) => {
        console.log("📋 Received pending attendance updates:", records.length);
        
        // Enrich records with intern information
        const enrichedRecords = await Promise.all(
          records.map(async (record) => {
            try {
              const internData = await getUserData(record.internId);
              return {
                ...record,
                internName: internData ? `${internData.firstName} ${internData.lastName}` : 'Unknown Intern',
                internEmail: internData?.email || 'No email'
              } as PendingAttendanceWithIntern;
            } catch (error) {
              console.error("Error fetching intern data:", error);
              return {
                ...record,
                internName: 'Unknown Intern',
                internEmail: 'No email'
              } as PendingAttendanceWithIntern;
            }
          })
        );

        setPendingRecords(enrichedRecords);
        setIsLoading(false);
      }
    );

    return unsubscribe;
  }, [userProfile]);

  // Filter records based on search term
  React.useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredRecords(pendingRecords);
      return;
    }

    const filtered = pendingRecords.filter(record => 
      record.internName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.internEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.createdAt.toDate().toLocaleDateString().includes(searchTerm.toLowerCase())
    );
    
    setFilteredRecords(filtered);
  }, [pendingRecords, searchTerm]);

  const handleApproval = async (recordId: string, status: "approved" | "rejected", internName: string) => {
    setIsProcessing(recordId);
    try {
      await updateAttendanceStatus(recordId, status);
      
      // Add visual feedback before record disappears
      if (status === "approved") {
        setApprovedRecords(prev => new Set([...Array.from(prev), recordId]));
      } else {
        setRejectedRecords(prev => new Set([...Array.from(prev), recordId]));
      }
      
      // Show success state for 2 seconds before record disappears
      setTimeout(() => {
        toast({
          title: `Attendance ${status}`,
          description: `${internName}'s attendance has been ${status}.`,
          variant: status === "approved" ? "default" : "destructive",
        });
        
        // The real-time subscription will handle removing the record
        setApprovedRecords(prev => {
          const newSet = new Set(prev);
          newSet.delete(recordId);
          return newSet;
        });
        setRejectedRecords(prev => {
          const newSet = new Set(prev);
          newSet.delete(recordId);
          return newSet;
        });
      }, 2000);
      
      console.log(`✅ Attendance ${status} for record ${recordId}`);
    } catch (error) {
      console.error("❌ Error updating attendance status:", error);
      toast({
        title: "Error",
        description: "Failed to update attendance status. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(null);
    }
  };

  const formatDuration = (clockIn?: any, clockOut?: any) => {
    if (!clockIn || !clockOut) return 'Incomplete';
    
    const start = clockIn.toDate();
    const end = clockOut.toDate();
    const diffMs = end.getTime() - start.getTime();
    const diffHours = diffMs / (1000 * 60 * 60);
    
    return `${diffHours.toFixed(2)} hours`;
  };

  const getLocationDisplay = (location: any) => {
    if (typeof location === 'string') return location;
    if (location && location.address) return location.address;
    return 'Unknown location';
  };

  if (isLoading) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold mb-2">Attendance Approvals</h1>
          <p className="text-muted-foreground">
            Review and approve intern time-in/out records awaiting your approval
          </p>
        </div>
        <Badge variant="secondary" className="text-lg px-3 py-1">
          {filteredRecords.length} Pending
        </Badge>
      </div>

      {/* Summary Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="h-5 w-5" />
            Approval Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{pendingRecords.length}</div>
              <p className="text-sm text-muted-foreground">Total Pending</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {pendingRecords.filter(r => r.clockIn && !r.clockOut).length}
              </div>
              <p className="text-sm text-muted-foreground">Time-in Only</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {pendingRecords.filter(r => r.clockIn && r.clockOut).length}
              </div>
              <p className="text-sm text-muted-foreground">Complete Sessions</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Search */}
      <Card>
        <CardContent className="pt-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search by intern name, email, or date..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </CardContent>
      </Card>

      {/* Pending Records */}
      <div className="space-y-4">
        {filteredRecords.map((record) => {
          const isApproved = approvedRecords.has(record.id!);
          const isRejected = rejectedRecords.has(record.id!);
          const isBeingProcessed = isProcessing === record.id;
          
          return (
            <Card key={record.id} className={`transition-all duration-500 ${
              isApproved ? 'border-green-300 bg-green-50' : 
              isRejected ? 'border-red-300 bg-red-50' : 
              'border-orange-200'
            }`}>
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-full transition-colors duration-300 ${
                      isApproved ? 'bg-green-100' : 
                      isRejected ? 'bg-red-100' : 
                      'bg-orange-100'
                    }`}>
                      <User className={`h-4 w-4 ${
                        isApproved ? 'text-green-600' : 
                        isRejected ? 'text-red-600' : 
                        'text-orange-600'
                      }`} />
                    </div>
                    <div>
                      <CardTitle className="text-lg">{record.internName}</CardTitle>
                      <CardDescription>{record.internEmail}</CardDescription>
                    </div>
                  </div>
                  
                  {/* Dynamic Status Badge */}
                  {isApproved && (
                    <Badge className="bg-green-100 text-green-800 border-green-200 animate-pulse">
                      <CheckCircle className="h-3 w-3 mr-1" />
                      Approved!
                    </Badge>
                  )}
                  {isRejected && (
                    <Badge className="bg-red-100 text-red-800 border-red-200 animate-pulse">
                      <XCircle className="h-3 w-3 mr-1" />
                      Rejected
                    </Badge>
                  )}
                  {isBeingProcessed && !isApproved && !isRejected && (
                    <Badge variant="outline" className="text-blue-600 border-blue-200">
                      <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600 mr-1"></div>
                      Processing...
                    </Badge>
                  )}
                  {!isApproved && !isRejected && !isBeingProcessed && (
                    <Badge variant="outline" className="text-orange-600 border-orange-200">
                      <Clock className="h-3 w-3 mr-1" />
                      Pending Approval
                    </Badge>
                  )}
                </div>
              </CardHeader>

            <CardContent className="space-y-4">
              {/* Date and Time Info */}
              <div className="bg-muted/50 p-4 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {/* Date */}
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-blue-600" />
                    <div>
                      <div className="text-sm font-medium">Date</div>
                      <div className="text-sm text-muted-foreground">
                        {record.createdAt.toDate().toLocaleDateString('en-US', {
                          weekday: 'short',
                          month: 'short',
                          day: 'numeric',
                          year: 'numeric'
                        })}
                      </div>
                    </div>
                  </div>

                  {/* Time In */}
                  <div className="flex items-center gap-2">
                    <LogIn className="h-4 w-4 text-green-600" />
                    <div>
                      <div className="text-sm font-medium">Time In</div>
                      <div className="text-sm text-muted-foreground">
                        {record.clockIn ? record.clockIn.toDate().toLocaleTimeString() : 'Not recorded'}
                      </div>
                    </div>
                  </div>

                  {/* Time Out */}
                  <div className="flex items-center gap-2">
                    <LogOut className="h-4 w-4 text-red-600" />
                    <div>
                      <div className="text-sm font-medium">Time Out</div>
                      <div className="text-sm text-muted-foreground">
                        {record.clockOut ? record.clockOut.toDate().toLocaleTimeString() : 'Not recorded'}
                      </div>
                    </div>
                  </div>

                  {/* Duration */}
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-purple-600" />
                    <div>
                      <div className="text-sm font-medium">Duration</div>
                      <div className="text-sm text-muted-foreground">
                        {formatDuration(record.clockIn, record.clockOut)}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Location and Photos */}
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-2 flex-1">
                  <MapPin className="h-4 w-4 text-blue-600 mt-0.5" />
                  <div className="flex-1">
                    <div className="text-sm font-medium">Location</div>
                    <div className="text-sm text-muted-foreground">
                      {getLocationDisplay(record.location)}
                    </div>
                  </div>
                </div>

                {/* Photos Section */}
                <div className="flex items-center gap-4">
                  {/* Time-in Photo */}
                  {record.photoUrl && (
                    <div className="flex flex-col items-center gap-1">
                      <div className="text-xs text-muted-foreground font-medium">Time-in</div>
                      <div className="flex items-center gap-1">
                        <Camera className="h-3 w-3 text-green-600" />
                        <img
                          src={record.photoUrl}
                          alt="Time-in photo"
                          className="w-16 h-16 rounded-lg object-cover border border-muted cursor-pointer hover:opacity-90 transition-opacity"
                          onClick={() => window.open(record.photoUrl, '_blank')}
                        />
                      </div>
                    </div>
                  )}

                  {/* Time-out Photo */}
                  {record.timeOutPhotoUrl && (
                    <div className="flex flex-col items-center gap-1">
                      <div className="text-xs text-muted-foreground font-medium">Time-out</div>
                      <div className="flex items-center gap-1">
                        <Camera className="h-3 w-3 text-red-600" />
                        <img
                          src={record.timeOutPhotoUrl}
                          alt="Time-out photo"
                          className="w-16 h-16 rounded-lg object-cover border border-muted cursor-pointer hover:opacity-90 transition-opacity"
                          onClick={() => window.open(record.timeOutPhotoUrl, '_blank')}
                        />
                      </div>
                    </div>
                  )}
                  
                  {/* No photos indicator */}
                  {!record.photoUrl && !record.timeOutPhotoUrl && (
                    <div className="text-sm text-muted-foreground italic">
                      No photos available
                    </div>
                  )}
                </div>
              </div>

              {/* Warning for incomplete sessions */}
              {record.clockIn && !record.clockOut && (
                <div className="flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm text-yellow-800">
                    This is an incomplete session - intern has only clocked in
                  </span>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex gap-3 pt-2">
                {isApproved && (
                  <div className="flex-1 bg-green-100 border border-green-300 rounded-lg p-3 text-center">
                    <CheckCircle className="h-5 w-5 mx-auto mb-1 text-green-600" />
                    <p className="text-sm font-medium text-green-800">Approved Successfully!</p>
                    <p className="text-xs text-green-600">This record will disappear in a moment</p>
                  </div>
                )}
                
                {isRejected && (
                  <div className="flex-1 bg-red-100 border border-red-300 rounded-lg p-3 text-center">
                    <XCircle className="h-5 w-5 mx-auto mb-1 text-red-600" />
                    <p className="text-sm font-medium text-red-800">Rejected</p>
                    <p className="text-xs text-red-600">This record will disappear in a moment</p>
                  </div>
                )}

                {!isApproved && !isRejected && (
                  <>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          className="flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50"
                          disabled={isBeingProcessed}
                        >
                          {isBeingProcessed ? (
                            <>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                              Processing...
                            </>
                          ) : (
                            <>
                              <CheckCircle className="h-4 w-4 mr-2" />
                              Approve
                            </>
                          )}
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Approve Attendance</AlertDialogTitle>
                          <AlertDialogDescription>
                            Are you sure you want to approve {record.internName}'s attendance record for{' '}
                            {record.createdAt.toDate().toLocaleDateString()}?
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => handleApproval(record.id!, 'approved', record.internName)}
                            className="bg-green-600 hover:bg-green-700"
                          >
                            Approve
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>

                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          variant="outline"
                          className="flex-1 border-red-200 text-red-600 hover:bg-red-50 disabled:opacity-50"
                          disabled={isBeingProcessed}
                        >
                          <XCircle className="h-4 w-4 mr-2" />
                          Reject
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Reject Attendance</AlertDialogTitle>
                          <AlertDialogDescription>
                            Are you sure you want to reject {record.internName}'s attendance record for{' '}
                            {record.createdAt.toDate().toLocaleDateString()}? This action cannot be undone.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => handleApproval(record.id!, 'rejected', record.internName)}
                            className="bg-red-600 hover:bg-red-700"
                          >
                            Reject
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
          );
        })}

        {/* Empty State */}

        {/* Empty State */}
        {filteredRecords.length === 0 && !isLoading && (
          <Card className="text-center py-12">
            <CardContent>
              <CheckCircle className="h-12 w-12 mx-auto mb-4 text-green-600" />
              <h3 className="text-lg font-medium mb-2">All caught up!</h3>
              <p className="text-muted-foreground">
                {searchTerm 
                  ? "No pending attendance records match your search"
                  : "There are no pending attendance records requiring your approval"
                }
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}